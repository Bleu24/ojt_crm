# Environment Variables Template for Backend
# C# Zoom API Configuration - Hybrid OAuth System
# You need BOTH types of Zoom apps for full functionality:

# 1. OAuth 2.0 App (for user-managed meetings) - PRIMARY
ZOOM_OAUTH_CLIENT_ID=your_oauth_client_id_here
ZOOM_OAUTH_CLIENT_SECRET=your_oauth_client_secret_here
ZOOM_REDIRECT_URI=http://localhost:5000/api/zoom/callback

# 2. Server-to-Server OAuth App (for system fallback meetings) - FALLBACK
ZOOM_CLIENT_ID=your_server_to_server_client_id_here
ZOOM_CLIENT_SECRET=your_server_to_server_client_secret_here
ZOOM_ACCOUNT_ID=your_zoom_account_id_here
ZOOM_USER_ID=me

# Instructions for Zoom Apps:
# STEP 1: OAuth 2.0 App (REQUIRED for user connections)
# 1. Go to https://marketplace.zoom.us/ â†’ Develop â†’ Build App
# 2. Choose "OAuth" app type
# 3. Set redirect URI: http://localhost:5000/api/zoom/callback
# 4. Required scopes: meeting:write, meeting:read, user:read
# 5. Copy Client ID and Secret to ZOOM_OAUTH_* variables above

# STEP 2: Server-to-Server App (OPTIONAL for system fallback)
# 1. Create separate "Server-to-Server OAuth" app
# 2. Required scopes: meeting:write:admin, meeting:read:admin, user:read:admin
# 3. Copy credentials to ZOOM_CLIENT_ID, ZOOM_CLIENT_SECRET, ZOOM_ACCOUNT_ID

# ðŸŽ¯ RESULT: Users connect personal Zoom accounts, system falls back to Server-to-Server if neededv and fill in your actual values

# ===========================================
# Database Configuration (Required)
# ===========================================
MONGO_URI=mongodb+srv://username:password@cluster.mongodb.net/database?retryWrites=true&w=majority

# ===========================================
# Authentication (Required)
# ===========================================
JWT_SECRET=your-super-secure-jwt-secret-at-least-32-characters-long

# ===========================================
# AI API Configuration (Required for NAP Reports)
# ===========================================
GEMINI_API_KEY=your-gemini-api-key-here

# ===========================================
# Server Configuration
# ===========================================
NODE_ENV=development
PORT=5000

# ===========================================
# CORS Configuration
# ===========================================
FRONTEND_URL=http://localhost:3000

# ===========================================
# File Upload Configuration (Cloudinary)
# ===========================================
CLOUDINARY_CLOUD_NAME=your_cloud_name_here
CLOUDINARY_API_KEY=your_api_key_here
CLOUDINARY_API_SECRET=your_api_secret_here
MAX_FILE_SIZE=10485760

# ===========================================
# Production Example:
# ===========================================
# MONGO_URI=mongodb+srv://user:pass@cluster.mongodb.net/prod_db?retryWrites=true&w=majority
# JWT_SECRET=production-super-secure-random-string-min-32-chars
# GEMINI_API_KEY=your-production-gemini-key
# NODE_ENV=production
# PORT=5000
# FRONTEND_URL=https://your-app.vercel.app
# MAX_FILE_SIZE=10485760

# Zoom API Configuration
# Get these from your Zoom App Marketplace: https://marketplace.zoom.us/
ZOOM_CLIENT_ID=your_zoom_client_id_here
ZOOM_CLIENT_SECRET=your_zoom_client_secret_here
ZOOM_ACCOUNT_ID=your_zoom_account_id_here
ZOOM_USER_ID=me # or your specific Zoom user ID
ZOOM_REDIRECT_URI=http://localhost:5000/api/zoom/callback

# Instructions for Zoom:
# 1. Go to https://marketplace.zoom.us/
# 2. Create a "Server-to-Server OAuth" app for system-level access
# 3. Create a separate "OAuth 2.0" app for user-managed meetings
# 4. Get your Client ID, Client Secret, and Account ID
# 5. Set the redirect URI to: http://localhost:5000/api/zoom/callback (dev) or your production URL
# 6. Add these to your .env file
# 7. Make sure your apps have the following scopes:
#    - meeting:write:admin
#    - meeting:read:admin
#    - user:read:admin
# 8. Users can now connect their own Zoom accounts for hosting meetings! ðŸŽ¥ï¿½
